package com.epam.bigdata.hive.second;

import org.apache.hadoop.hive.ql.exec.UDFArgumentException;
import org.apache.hadoop.hive.ql.metadata.HiveException;
import org.apache.hadoop.hive.ql.udf.generic.GenericUDTF;
import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;
import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;

import java.util.ArrayList;
import java.util.List;

public class UserAgentFunction extends GenericUDTF {

    private PrimitiveObjectInspector stringOI = null;

    @Override
    public StructObjectInspector initialize(ObjectInspector[] args) throws UDFArgumentException {

        if (args.length != 1) {
            throw new UDFArgumentException("explode() takes only one argument");
        }

        if (args[0].getCategory() != ObjectInspector.Category.LIST) {
            throw new UDFArgumentException("explode() takes an array as a parameter");
        }

        stringOI = (PrimitiveObjectInspector) args[0];

        List<String> fieldNames = new ArrayList<>(3);
        List<ObjectInspector> fieldOIs = new ArrayList<>(3);
        fieldNames.add("os");
        fieldNames.add("browser");
        fieldNames.add("device");

        fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
        fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
        fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
        return ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames, fieldOIs);
    }

    @Override
    public void process(Object[] record) throws HiveException {
        String uaInfo = stringOI.getPrimitiveJavaObject(record[0]).toString();

        String info = uaInfo.split("\\(")[1].replace(")", "");

        String[] infoArray = info.split(";");

        Object[] browser = {infoArray[1]};
        Object[] os = {infoArray[2]};
        Object[] device = {infoArray[4]};

        System.out.println("Browser = " + browser);

        forward(browser);
        forward(os);
        forward(device);
    }

    @Override
    public void close() throws HiveException {
        // do nothing
    }
}




<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.epam</groupId>
    <artifactId>bigdata</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <properties>
        <hadoop-version>2.7.1</hadoop-version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.hive</groupId>
            <artifactId>hive-exec</artifactId>
            <version>0.9.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

Load data local inpath "ip/imp.20131019.txt" into table user_info;

select * from 
	(select t.*, rank() over(partition by city_id order by cnt desc) as rnk 
	 from (select test.*, count(*) as cnt from test
	group by city_id, device) as t)
as tt where tt.rnk <=5



hive --hiveconf hive.root.logger=INFO,console
ADD jar ./bigdata-0.0.1-SNAPSHOT-jar-with-dependencies.jar;
add jar ./bigdata-0.0.1-SNAPSHOT.jar;

DROP FUNCTION process_agent;
CREATE FUNCTION process_agent as 'com.epam.bigdata.hive.second.UserAgentFunction';
SELECT ui.browser as browser, ui.os as os, ui.device as device, city FROM user_info lateral view process_agent(user_agent, 'browser', 'os', 'device') ui as browser, os, device group by city, browser, os, device;

create external table user_info (bid_id String, timestmp String, log_type String, iPinyou_id String, user_agent String, ip String, region String, city String, ad_exchange String, domain String, url String, anonymous_url_id String, ad_slot_id String, ad_slot_width String, ad_slot_height String, ad_slot_visibility String, ad_slot_format String, ad_slot_floor_price String, creative_id String, bidding_price String, paying_price String, key_page_url String, advertiser_id String,  user_tags String) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LOCATION '/root/ip/';

create table browsers (city_id String, browser String);

from user_agent insert overwrite table browsers select br_rnk.city, br_rnk.browser from (select br.*, rank() over(partition by city order by cnt desc) as rnk from (select city, browser, count(*) as cnt from group by city, browser) as br) as br_rnk where br_rnk .rnk <=5;


from user_agent insert overwrite browsers select city_id, browser 


from user_agent INSERT OVERWRITE browsers select * from user_agent;


FROM user_agent INSERT OVERWRITE table browsers SELECT * WHERE city =217 



INSERT OVERWRITE table devices SELECT * WHERE city =216;


//temporary table
CREATE TABLE user_agent
   AS
SELECT ui.browser as browser, ui.os as os, ui.device as device, city as city_id FROM user_info lateral view process_agent(user_agent, 'browser', 'os', 'device') ui as browser, os, device group by city, browser, os, device;

//правильный запрос
(select br_rnk.city, br_rnk.browser from (select br.*, rank() over(partition by city order by cnt desc) as rnk from (select city, browser, count(*) as cnt from user_agent group by city, browser) as br) as br_rnk where br_rnk .rnk <=5;

select br_rnk.city, br_rnk.os from (select br.*, rank() over(partition by city order by cnt desc) as rnk from (select city, os, count(*) as cnt from user_agent group by city, os) as br) as br_rnk where br_rnk.rnk <=5;


FROM user_agent ua INSERT OVERWRITE table browsers  SELECT * inner join (select br_rnk.city, br_rnk.browser from (select br.*, rank() over(partition by city order by cnt desc) as rnk from (select city, browser, count(*) as cnt from user_agent group by city, browser) as br) as br_rnk where br_rnk .rnk <=5) on ua.city = br_rnk.city and ua.browser = br_rnk.browser;






